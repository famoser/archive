<?php
/**
 * Created by PhpStorm.
 * User: famoser
 * Date: 21/08/2016
 * Time: 11:43
 */

namespace Famoser\OnlineOfficeBundle\Controller\Base;


use Doctrine\ORM\EntityManager;
use Famoser\OnlineOfficeBundle\Entity\User;
use Famoser\OnlineOfficeBundle\Entity\Users;
use Famoser\OnlineOfficeBundle\Enums\CacheKeys;
use Famoser\OnlineOfficeBundle\Enums\CrudType;
use Famoser\OnlineOfficeBundle\Enums\IconEnum;
use Famoser\OnlineOfficeBundle\Enums\MenuEntries;
use Famoser\OnlineOfficeBundle\Enums\TaskRoles;
use Famoser\OnlineOfficeBundle\Factories\RepositoryFactory;
use Famoser\OnlineOfficeBundle\Models\View\BreadCrumbEntry;
use Famoser\OnlineOfficeBundle\Models\View\MenuEntry;
use Famoser\OnlineOfficeBundle\Models\View\OrganizationsMenuEntry;
use Famoser\OnlineOfficeBundle\Models\View\TopBar;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Response;

abstract class BaseController extends Controller
{
    public function __construct()
    {
        $this->breadCrumbs = $this->getBaseBreadCrumbs();
    }

    abstract protected function getBaseFolder();

    abstract protected function getActiveMainMenuEntry();

    abstract protected function getEntityIcon();

    protected function getBaseBreadCrumbs()
    {
        $arr = [];
        $arr[] = new BreadCrumbEntry($this->getEntityNamePlural(), $this->getEntityNamePlural() . "_index", null, $this->getEntityIcon());
        return $arr;
    }

    protected function getEntityName()
    {
        return substr($this->getBaseFolder(), 0, -1);
    }

    protected function getEntityNamePlural()
    {
        return $this->getBaseFolder();
    }

    protected function getPath($slug)
    {
        return $this->getBaseFolder() . "/" . $slug . ".html.twig";
    }

    protected function getCrudPath($slug)
    {
        if ($slug == CrudType::$NEW)
            return "crud/new.html.twig";
        if ($slug == CrudType::$EDIT)
            return "crud/edit.html.twig";
        if ($slug == CrudType::$DELETE)
            return "crud/delete.html.twig";
        return new \Exception("unknown crud type");
    }

    private $breadCrumbs;

    private function addViewEntries($array = array())
    {
        $array["menu"] = $this->getMenuArray($this->getActiveMainMenuEntry());
        $array["topbar"] = $this->getTopBar();
        $array["organizationMenuEntries"] = $this->getOrganizationsMenuEntries();
        $array["breadcrumbs"] = $this->breadCrumbs;
        $array["entityName"] = $this->getEntityName();
        $array["entityNamePlural"] = $this->getEntityNamePlural();
        $array["entityIcon"] = $this->getEntityIcon();
        return $array;
    }

    protected function addBreadCrumb($title, $routeName, $routeArguments = null, $icon = null)
    {
        $this->breadCrumbs[] = new BreadCrumbEntry($title, $routeName, $routeArguments, $icon);
    }

    private function getMenuArray($activeMenuEntry)
    {
        $arr = [];
        $arr[] = new MenuEntry("dashboard", "dashboard_index", IconEnum::$DASHBOARD, $activeMenuEntry == MenuEntries::$DASHBOARD);
        $arr[] = new MenuEntry("tasks", "tasks_index", IconEnum::$TASKS, $activeMenuEntry == MenuEntries::$TASKS);
        $arr[] = new MenuEntry("customers", "customers_index", IconEnum::$CUSTOMERS, $activeMenuEntry == MenuEntries::$CUSTOMERS);
        $arr[] = new MenuEntry("offers", "offers_index", IconEnum::$OFFERS, $activeMenuEntry == MenuEntries::$OFFERS);
        $arr[] = new MenuEntry("orders", "orders_index", IconEnum::$ORDERS, $activeMenuEntry == MenuEntries::$ORDERS);
        return $arr;
    }

    private function getTopBar()
    {
        $user = $this->getUser();
        $notifs = RepositoryFactory::getNotificationsRepository($this->getDoctrine())->getNextNotifications($user);

        $tasks = array();
        foreach ($user->getPersons() as $person) {
            $tasks = $person->getTaskPersons();
            foreach ($tasks as $task) {
                if ($task->hasRole(TaskRoles::$ROLE_CONTRIBUTER)) {
                    $tasks[] = $task->getTask();
                }
            }
        }

        return new TopBar($tasks, $notifs);
    }

    /**
     * @return EntityManager
     */
    protected function getEntityManager()
    {
        return $this->getDoctrine()->getManager();
    }

    /**
     * @return User
     */
    protected function getUser()
    {
        return parent::getUser(); // TODO: Change the autogenerated stub
    }

    private function getOrganizationsMenuEntries()
    {
        $arr = array();
        $soi = $this->get('session')->get(CacheKeys::$SELECTED_COMPANY_ID);

        $organizations = RepositoryFactory::getOrganizationsRepository($this->getDoctrine())->getOrganizations($this->getUser()->getPerson());

        foreach ($organizations as $company) {
            $arr[] = new OrganizationsMenuEntry($company, $company->getId() == $soi);
        }
        return $arr;
    }

    protected function render($view, array $parameters = array(), Response $response = null)
    {
        return parent::render($view, $this->addViewEntries($parameters), $response);
    }
}